version: 2.1

orbs: 
  sonarcloud: sonarsource/sonarcloud@2.0.0
  snyk: snyk/snyk@1.5.0

executors:
  android-executor:
    docker:
      - image: cimg/android:2025.04 
    working_directory: ~/library-app
    environment:
      GRADLE_OPTS: -Xmx3200m -Dorg.gradle.daemon=false
      JVM_OPTS: -Xmx3200m

commands:
  fix-gradlew:
    steps:
      - run: sed -i 's/\r$//' gradlew && chmod +x gradlew

  restore-gradle-cache:
    steps:
      - restore_cache:
          keys:
            - v1-gradle-{{ checksum "build.gradle.kts" }}-{{ checksum "gradle/wrapper/gradle-wrapper.properties" }}
            - v1-gradle-

  save-gradle-cache:
    steps:
      - save_cache:
          paths:
            - ~/.gradle/caches
            - ~/.gradle/wrapper
          key: v1-gradle-{{ checksum "build.gradle.kts" }}-{{ checksum "gradle/wrapper/gradle-wrapper.properties" }}

jobs:
  build:
    executor: android-executor
    steps:
      - checkout
      - run:
          name: Crear local.properties
          command: echo "sdk.dir=/opt/android/sdk" > local.properties
      - fix-gradlew
      - restore-gradle-cache
      - run:
          name: An√°lisis est√°tico
          command: |
            echo "üîç Iniciando an√°lisis est√°tico..."
            
            # Ejecutar an√°lisis sin fallar el workflow
            ./gradlew detekt ktlintCheck spotlessCheck || {
              echo "‚ö†Ô∏è Se encontraron problemas de calidad"
              echo "üìã Revisa los reportes en los artifacts"
              exit 0  # No fallar el workflow
            }
            
            echo "‚úÖ An√°lisis completado sin problemas"
      - save-gradle-cache
      - store_artifacts:
          path: build/reports
          destination: static-analysis-reports
      - store_artifacts: 
          path: build/reports/detekt
          destination: detekt-reports

  build-and-test:
    executor: android-executor
    steps:
      - checkout
      - run:
          name: Crear local.properties
          command: echo "sdk.dir=/opt/android/sdk" > local.properties
      - fix-gradlew
      - restore-gradle-cache
      - run: 
          name: Ejecutar tests y generar reportes
          command: |
            ./gradlew testDebugUnitTest
            ./gradlew koverXmlReport
      - run:
          name: Verificar reportes Kover generados
          command: |
            echo "=== Buscando reportes Kover ==="
            find build -path "*/kover/*" -name "*.xml" -type f 2>/dev/null || echo "No se encontraron reportes Kover"
            echo "=== Estructura de reports ==="
            ls -la build/reports/ 2>/dev/null || echo "No hay directorio reports"
      - save-gradle-cache
      - run: 
          name: Preparar workspace con reportes Kover
          command: |
            mkdir -p tmp-workspace
            
            # Buscar archivo de cobertura de Kover
            if [ -f "build/reports/kover/xml/report.xml" ]; then
              echo "Encontrado reporte Kover"
              cp build/reports/kover/xml/report.xml tmp-workspace/kover-report.xml
            else
              echo "No se encontr√≥ reporte Kover, creando archivo dummy"
              echo "<coverage></coverage>" > tmp-workspace/dummy-coverage.xml
            fi
            
            # Mostrar qu√© se va a persistir
            echo "=== Archivos a persistir ==="
            ls -la tmp-workspace/
      - store_test_results:
          path: build/test-results
      - store_artifacts:
          path: build/reports
          destination: kover-reports
      - persist_to_workspace:
          root: tmp-workspace
          paths:
            - "*.xml"

  sonarcloud-analysis:
    docker:
    - image: sonarsource/sonar-scanner-cli:latest
    steps:
    - checkout  
    - run:
        name: Configurar SonarCloud
        command: |
          sonar-scanner \
            -Dsonar.projectKey=SergiMPorto_PersonalLibrary \
            -Dsonar.organization=sergimporto \
            -Dsonar.projectName="Personal Library" \
            -Dsonar.projectVersion=1.0 \
            -Dsonar.sources=app/src/main/java,app/src/main/kotlin \
            -Dsonar.host.url=https://sonarcloud.io \
            -Dsonar.login=$SONAR_TOKEN

  snyk-security-scan:
    docker:
    - image: snyk/snyk:gradle
    steps:
    - checkout
    - run:
        name: Snyk security scan
        command: |
          snyk auth $SNYK_TOKEN
          snyk test --all-projects --severity-threshold=none > snyk-results.json || true
    - store_artifacts:
        path: snyk-results.json
        destination: security-report

workflows:
  library-ci:
    jobs:
      - build
      - build-and-test:
          requires:
            - build
      - sonarcloud-analysis:
          requires:
            - build-and-test
      - snyk-security-scan:
          requires:
            - build-and-test